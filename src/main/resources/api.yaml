openapi: 3.0.3
info:
  version: 1.0.0
  title: Anthology Stories API
  description: Stories registry with authors and tags
  contact:
    name: Frédéric Léveillée
    email: f.leveillee@icloud.com
  license:
    name: Spibo Studio license
    url: https://spibo.studio/license

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/scooby-doo/Anthology/1.0.0

paths:
  '/stories':
    get:
      description: This will list all stories on file
      parameters:
        - name: bodyLimit
          in: query
          description: Max number of stories returned
          schema:
            type: integer
            default: 20
            maximum: 30
            example: 10
        - name: pageNum
          in: query
          description: Page number where to start the list
          schema:
            type: integer
            default: 1
            example: 22
      responses:
        '200':
          description: Successful pull of stories list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Story"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Story"
                xml:
                  name: Stories
                  wrapped: true
        '404':
          description: No stories found
    post:
      description: Create a new story
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Story"
      responses:
        '201':
          description: Story Saved Successfully

  '/stories/{id}':
    get:
      description: Obtain the Story details
      parameters:
        - name: id
          description: Story ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 14
      responses:
        '200':
          description: >-
            Successful retrieval of the requested story
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Story"
            application/xml:
              schema:
                $ref: "#/components/schemas/Story"
        '404':
          description: Story not found
    put:
      description: Update a story
      parameters:
        - name: id
          description: Story ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 14
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Story"
      responses:
        '200':
          description: Story Updated Successfully
        '404':
          description: Story not found
    delete:
      description: Delete a story
      parameters:
        - name: id
          description: Story ID
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 14
      responses:
        '200':
          description: Story Deleted Successfully
        '404':
          description: Story not found
components:
  schemas:
    BaseEntity:
      description: Base Entity contains common fields for all entities, mostly the ID and auditing fields.
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 14
        slug:
          type: string
          example: lobo-leo
        dateCreated:
          type: string
          example: "2016-10-06T10:34"
        dateLastModified:
          type: string
          example: "2016-10-06T10:34"
        version:
          type: integer
          example: 5
    BaseTextEntity:
      description: Base Text Entity contains Base Entity as well as title and summary fields
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - title
            - summary
          properties:
            title:
              type: string
              example: The Quick Brown Fox
            summary:
              type: string
              example: >-
                The quick brown fox crosses path with a fence that he has trouble jumping over.
    Story:
      allOf: # Combines the main `Pet` schema with `Dog`-specific properties
        - $ref: '#/components/schemas/BaseTextEntity'
        - description: Story Entity Unique Fields
          type: object
          properties:
            chapters:
              type: array
              xml:
                name: Chapters
                wrapped: true
              items:
                $ref: '#/components/schemas/Chapter'
    Chapter:
      allOf:
        - $ref: '#/components/schemas/BaseTextEntity'
        - description: Chapter Entity Unique Fields
          type: object
          required:
            - number
          properties:
            number:
              description: Chapter Number
              type: integer
              format: int32
              example: 14
            content:
              description: Chapter Content Text Blob
              type: string
            authors:
              type: array
              items:
                $ref: '#/components/schemas/Author'
              xml:
                name: Authors
                wrapped: true
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              xml:
                name: Tags
                wrapped: true
            DatePublished:
              type: string
              example: "2016-10-06T10:34"
    Author:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - description: Author Entity Unique Fields
          type: object
          properties:
            name:
              type: string
              example: Alex Brown
            stories:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/Story'
    Tag:
      description: Tag Entity
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - description: Tag Entity Unique Fields
          type: object
          properties:
            name:
              type: string
              example: Suspense
            stories:
              type: array
              xml:
                wrapped: true
              items:
                $ref: '#/components/schemas/Story'
